image: python:3.8.5

stages:
    - build
    - test
    - deploy

variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    WORKON_HOME: "$CI_PROJECT_DIR/venv"

default:
    before_script:
        - pip install pipenv

install_pipenv:
    stage: build
    script:
        - env VIRTUALENV_COPIES=1 pipenv sync --dev
    artifacts:
        paths:
            - .cache/pip
            - venv/

install_node:
    image: node:14.13.0-stretch
    stage: build
    before_script: []
    script:
        - yarn install
    artifacts:
        paths:
            - node_modules/

prettier:
    image: node:14.13.0-stretch
    stage: test
    before_script: []
    dependencies: 
        - install_node
    script:
        - yarn run check-format

eslint:
    image: node:14.13.0-stretch
    stage: test
    dependencies: 
        - install_node
    before_script:
        - yarn run check-eslint-config  
    script:
        - yarn run lint

flake8:
    stage: test
    dependencies: 
        - install_pipenv
    script:
        - pipenv run flake8

black:
    stage: test
    dependencies: 
        - install_pipenv
    script:
        - pipenv run black . --check

isort:
    stage: test
    dependencies: 
        - install_pipenv
    script:
        - pipenv run isort . --check

deploy:
    image: ubuntu:focal-20201008
    stage: deploy
    dependencies: []
    before_script:
        - "which ssh-agent || { apt update -y && apt install openssh-client -y; } > /dev/null"
        - apt install rsync -y > /dev/null
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    script:
        - ssh $PROD_SERVER_USER@$PROD_SERVER_IP "docker-compose -f garbage/docker-compose.prod.yml down --rmi all && docker volume rm garbage_static_files || true"
        - ssh $PROD_SERVER_USER@$PROD_SERVER_IP "rm -rf garbage/ || true"
        - ssh $PROD_SERVER_USER@$PROD_SERVER_IP "docker system prune -f"
        - rsync -azvh . $PROD_SERVER_USER@$PROD_SERVER_IP:garbage/
        - ssh $PROD_SERVER_USER@$PROD_SERVER_IP "cp .env garbage/ && docker-compose -f garbage/docker-compose.prod.yml build --force-rm --no-cache && docker-compose -f garbage/docker-compose.prod.yml up -d --remove-orphans"
    when: manual
